{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This simple application demonstrates how to use and deploy Nginx Reverse proxy in a docker container and use it to route traffic to other services internally (another container) and an external service. A reverse proxy server is a type of proxy server that typically sits behind the firewall in a private network and directs client requests to the appropriate backend server. Credits : https://linuxhandbook.com/nginx-reverse-proxy-docker/ Application components This application has essentially 2 services - a web app & a nginx reverse proxy engine, which are both deployed as a container using docker compose. This start-up project demnstrates how to deploy these services as containers and how to configure the nginx reverse proxy Application structure |\u2500\u2500 docs # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 img # Contains all images referenced in mkdocs | \u251c\u2500\u2500 *.md # Other mkdocs .md files \u251c\u2500\u2500 mkdocs.yml # YAML for for mkdocs \u251c\u2500\u2500 .gitattributes | \u251c\u2500\u2500 default.conf # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 Dockerfile # Dockerfile for the web-app \u251c\u2500\u2500 Dockerfile.nginx # Dockerfile for the nginx reverse-proxy | \u251c\u2500\u2500 docker-compose.yaml # Defines docker-compose.yaml file for web-app & nginx-reverse-proxy | \u251c\u2500\u2500 helloworld.py # Simple hello world python program using Flask API | \u251c\u2500\u2500 README.md # Standard README.md file","title":"Home"},{"location":"#introduction","text":"This simple application demonstrates how to use and deploy Nginx Reverse proxy in a docker container and use it to route traffic to other services internally (another container) and an external service. A reverse proxy server is a type of proxy server that typically sits behind the firewall in a private network and directs client requests to the appropriate backend server. Credits : https://linuxhandbook.com/nginx-reverse-proxy-docker/","title":"Introduction"},{"location":"#application-components","text":"This application has essentially 2 services - a web app & a nginx reverse proxy engine, which are both deployed as a container using docker compose. This start-up project demnstrates how to deploy these services as containers and how to configure the nginx reverse proxy","title":"Application components"},{"location":"#application-structure","text":"|\u2500\u2500 docs # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 img # Contains all images referenced in mkdocs | \u251c\u2500\u2500 *.md # Other mkdocs .md files \u251c\u2500\u2500 mkdocs.yml # YAML for for mkdocs \u251c\u2500\u2500 .gitattributes | \u251c\u2500\u2500 default.conf # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 Dockerfile # Dockerfile for the web-app \u251c\u2500\u2500 Dockerfile.nginx # Dockerfile for the nginx reverse-proxy | \u251c\u2500\u2500 docker-compose.yaml # Defines docker-compose.yaml file for web-app & nginx-reverse-proxy | \u251c\u2500\u2500 helloworld.py # Simple hello world python program using Flask API | \u251c\u2500\u2500 README.md # Standard README.md file","title":"Application structure"},{"location":"copy-nginx-conf/","text":"Copy Nginx Configuration file The first step is to get a sample nginx configuation file default.conf from a base image. For this project, we will use Docker Hub's latest image:`nginx'. Create & go to your project folder nginx-docker PS C:\\Users\\aniru> cd ~\\workspace\\github\\nginx-docker Start the nginx container Now start the nginx container from the base image from Docker Hub docker run -d --name nginx-base -p 80:80 nginx Copy the nginx conf file Here we copy the nginx configuration file to your local folder docker cp nginx-base:/etc/nginx/conf.d/default.conf . Stop the nginx container We don't need the nginx container anymore. So let's stop the container. PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0e1687e6cd57 nginx \"/docker-entrypoint.\u2026\" 53 minutes ago Up 53 minutes 0.0.0.0:80->80/tcp nginx PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker stop nginx nginx","title":"Copy Nginx Configuration"},{"location":"copy-nginx-conf/#copy-nginx-configuration-file","text":"The first step is to get a sample nginx configuation file default.conf from a base image. For this project, we will use Docker Hub's latest image:`nginx'. Create & go to your project folder nginx-docker PS C:\\Users\\aniru> cd ~\\workspace\\github\\nginx-docker","title":"Copy Nginx Configuration file"},{"location":"copy-nginx-conf/#start-the-nginx-container","text":"Now start the nginx container from the base image from Docker Hub docker run -d --name nginx-base -p 80:80 nginx","title":"Start the nginx container"},{"location":"copy-nginx-conf/#copy-the-nginx-conf-file","text":"Here we copy the nginx configuration file to your local folder docker cp nginx-base:/etc/nginx/conf.d/default.conf .","title":"Copy the nginx conf file"},{"location":"copy-nginx-conf/#stop-the-nginx-container","text":"We don't need the nginx container anymore. So let's stop the container. PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0e1687e6cd57 nginx \"/docker-entrypoint.\u2026\" 53 minutes ago Up 53 minutes 0.0.0.0:80->80/tcp nginx PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker stop nginx nginx","title":"Stop the nginx container"},{"location":"create-nginx-reverse-proxy/","text":"Create Nginx Reverse Proxy server This has 2 steps : * Update the nginx configuration file default.conf with the desired routing of traffic * Create a docker container that has this configuration Update Nginx Configuration file Add the following lines : location /service1 { proxy_pass http://host.docker.internal:3333/service1; } location /service2 { proxy_pass http://host.docker.internal:3333/service2; } location /external { proxy_pass http://news.google.com; } This tells Nginx to : * Forward any request from /service1 to http://host.docker.internal:3333/service1. Note that localhost entry will not work here since the web-app is running within a container on your localhost. Hence, host.docker.internal * Forward any request from /service2 to http://host.docker.internal:3333/service2 * Forward any request from /external to http://news.google.com. This is just for testing purposes Update Nginx Dockerfile Copy following content to DockerFile.nginx . Please note that we cannot use Dockerfile as that is already referenced by the web-app # using Nginx base image FROM nginx # delete nginx default .conf .file RUN rm /etc/nginx/conf.d/default.conf # add the .conf file we have created COPY default.conf /etc/nginx/conf.d/default.conf #start the nginx server CMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"] This tells Docker to: Build an image starting with the nginx base image Remove the old configuration file Replace it with the newly updated default.conf Start the nginx server","title":"Create Nginx Reverse Proxy"},{"location":"create-nginx-reverse-proxy/#create-nginx-reverse-proxy-server","text":"This has 2 steps : * Update the nginx configuration file default.conf with the desired routing of traffic * Create a docker container that has this configuration","title":"Create Nginx Reverse Proxy server"},{"location":"create-nginx-reverse-proxy/#update-nginx-configuration-file","text":"Add the following lines : location /service1 { proxy_pass http://host.docker.internal:3333/service1; } location /service2 { proxy_pass http://host.docker.internal:3333/service2; } location /external { proxy_pass http://news.google.com; } This tells Nginx to : * Forward any request from /service1 to http://host.docker.internal:3333/service1. Note that localhost entry will not work here since the web-app is running within a container on your localhost. Hence, host.docker.internal * Forward any request from /service2 to http://host.docker.internal:3333/service2 * Forward any request from /external to http://news.google.com. This is just for testing purposes","title":"Update Nginx Configuration file"},{"location":"create-nginx-reverse-proxy/#update-nginx-dockerfile","text":"Copy following content to DockerFile.nginx . Please note that we cannot use Dockerfile as that is already referenced by the web-app # using Nginx base image FROM nginx # delete nginx default .conf .file RUN rm /etc/nginx/conf.d/default.conf # add the .conf file we have created COPY default.conf /etc/nginx/conf.d/default.conf #start the nginx server CMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"] This tells Docker to: Build an image starting with the nginx base image Remove the old configuration file Replace it with the newly updated default.conf Start the nginx server","title":"Update Nginx Dockerfile"},{"location":"create-web-app/","text":"Create Web App Create a simple web-app that uses python flask API and exposes 3 services : http://localhost:3333/ - returns msg : <h2>Hello from Index method</h2> http://localhost:3333/service1 - returns msg : <h2>Hello from Service method - #1</h2> http://localhost:3333/service2 - returns msg : <h2>Hello from Service method - #2</h2> Create starter python file Create file helloworld.py and copy the following content in there : from flask import Flask, request from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) #class Greeting (Resource): # def get(self): # return 'Hello World!' #api.add_resource(Greeting, '/') # Route_1 @app.route('/') def index_geek(): return '<h2>Hello from Index method</h2>' @app.route('/service1') def service1_geek(): return '<h2>Hello from Service method - #1</h2>' @app.route('/service2') def service2_geek(): return '<h2>Hello from Service method - #2</h2>' if __name__ == '__main__': app.run('0.0.0.0','3333') Create Dockerfile Now we will create the docker file for the web app. Create a file Dockerfile and copy the following : FROM python:3.11-alpine ADD helloworld.py / #install dependencies RUN pip install flask RUN pip install flask_restful #start hello world app EXPOSE 3333 CMD [ \"python\", \"./helloworld.py\"] This tells Docker to: Build an image starting with the python 3.11-alpine base image Install the Python dependencies - flask & flask_restful Expose port 3333 Set the default command for the container to run on start-up","title":"Create Web app"},{"location":"create-web-app/#create-web-app","text":"Create a simple web-app that uses python flask API and exposes 3 services : http://localhost:3333/ - returns msg : <h2>Hello from Index method</h2> http://localhost:3333/service1 - returns msg : <h2>Hello from Service method - #1</h2> http://localhost:3333/service2 - returns msg : <h2>Hello from Service method - #2</h2>","title":"Create Web App"},{"location":"create-web-app/#create-starter-python-file","text":"Create file helloworld.py and copy the following content in there : from flask import Flask, request from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) #class Greeting (Resource): # def get(self): # return 'Hello World!' #api.add_resource(Greeting, '/') # Route_1 @app.route('/') def index_geek(): return '<h2>Hello from Index method</h2>' @app.route('/service1') def service1_geek(): return '<h2>Hello from Service method - #1</h2>' @app.route('/service2') def service2_geek(): return '<h2>Hello from Service method - #2</h2>' if __name__ == '__main__': app.run('0.0.0.0','3333')","title":"Create starter python file"},{"location":"create-web-app/#create-dockerfile","text":"Now we will create the docker file for the web app. Create a file Dockerfile and copy the following : FROM python:3.11-alpine ADD helloworld.py / #install dependencies RUN pip install flask RUN pip install flask_restful #start hello world app EXPOSE 3333 CMD [ \"python\", \"./helloworld.py\"] This tells Docker to: Build an image starting with the python 3.11-alpine base image Install the Python dependencies - flask & flask_restful Expose port 3333 Set the default command for the container to run on start-up","title":"Create Dockerfile"},{"location":"define-docker-compose/","text":"Define Docker Compose Now we will define the docker-compose.yaml file that references both the web-app and nginx-reverse-proxy containers we just defined by using their respective Dockefile's Create docker-compose.yaml Create and copy the following contents to docker-compose.yaml version: '3' services: nginx: build: context: . dockerfile: Dockerfile.nginx ports: - 80:80 depends_on: - web web: build: context: . ports: - 3333:3333 This tells Docker Compose to : Define service nginx . This uses dockerfile: Dockerfile.nginx and runs on port 80 For simplicity, we have mapped the internal container port to the external container port Define service web . This uses default Dockerfile and runs on port 3333","title":"Define Docker Compose"},{"location":"define-docker-compose/#define-docker-compose","text":"Now we will define the docker-compose.yaml file that references both the web-app and nginx-reverse-proxy containers we just defined by using their respective Dockefile's","title":"Define Docker Compose"},{"location":"define-docker-compose/#create-docker-composeyaml","text":"Create and copy the following contents to docker-compose.yaml version: '3' services: nginx: build: context: . dockerfile: Dockerfile.nginx ports: - 80:80 depends_on: - web web: build: context: . ports: - 3333:3333 This tells Docker Compose to : Define service nginx . This uses dockerfile: Dockerfile.nginx and runs on port 80 For simplicity, we have mapped the internal container port to the external container port Define service web . This uses default Dockerfile and runs on port 3333","title":"Create docker-compose.yaml"},{"location":"run-app/","text":"Run the App We will now run and test the app Start the app Use command docker compose up to start the app from the project root directory. Note that 2 containers are created : nginx-docker-web-1 nginx-docker-nginx-1 PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker compose up [+] Running 2/0 - Container nginx-docker-web-1 Created 0.0s - Container nginx-docker-nginx-1 Created 0.0s Attaching to nginx-docker-nginx-1, nginx-docker-web-1 nginx-docker-web-1 | * Serving Flask app 'helloworld' nginx-docker-web-1 | * Debug mode: off nginx-docker-web-1 | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. nginx-docker-web-1 | * Running on all addresses (0.0.0.0) nginx-docker-web-1 | * Running on http://127.0.0.1:3333 nginx-docker-web-1 | * Running on http://172.29.0.2:3333 nginx-docker-nginx-1 | 2023/01/12 16:12:04 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) Now check the run-time status of the containers PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a4c0c31462c9 nginx-docker-nginx \"/docker-entrypoint.\u2026\" 29 hours ago Up 2 hours 0.0.0.0:80->80/tcp nginx-docker-nginx-1 368b5d540cc1 nginx-docker-web \"python ./helloworld\u2026\" 29 hours ago Up 2 hours 0.0.0.0:3333->3333/tcp nginx-docker-web-1 Test the application Let's check the nginx localhost running on port 80 Also, let's check the web-app running on port 3333 Now let's see if Nginx forwards our service1 request","title":"Run the app"},{"location":"run-app/#run-the-app","text":"We will now run and test the app","title":"Run the App"},{"location":"run-app/#start-the-app","text":"Use command docker compose up to start the app from the project root directory. Note that 2 containers are created : nginx-docker-web-1 nginx-docker-nginx-1 PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker compose up [+] Running 2/0 - Container nginx-docker-web-1 Created 0.0s - Container nginx-docker-nginx-1 Created 0.0s Attaching to nginx-docker-nginx-1, nginx-docker-web-1 nginx-docker-web-1 | * Serving Flask app 'helloworld' nginx-docker-web-1 | * Debug mode: off nginx-docker-web-1 | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. nginx-docker-web-1 | * Running on all addresses (0.0.0.0) nginx-docker-web-1 | * Running on http://127.0.0.1:3333 nginx-docker-web-1 | * Running on http://172.29.0.2:3333 nginx-docker-nginx-1 | 2023/01/12 16:12:04 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) Now check the run-time status of the containers PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a4c0c31462c9 nginx-docker-nginx \"/docker-entrypoint.\u2026\" 29 hours ago Up 2 hours 0.0.0.0:80->80/tcp nginx-docker-nginx-1 368b5d540cc1 nginx-docker-web \"python ./helloworld\u2026\" 29 hours ago Up 2 hours 0.0.0.0:3333->3333/tcp nginx-docker-web-1","title":"Start the app"},{"location":"run-app/#test-the-application","text":"Let's check the nginx localhost running on port 80 Also, let's check the web-app running on port 3333 Now let's see if Nginx forwards our service1 request","title":"Test the application"}]}